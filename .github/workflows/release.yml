name: release

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*'

jobs:

  create-release-artifacts:
    runs-on: ubuntu-latest

    container:
      # TODO: create our own container
      image: arduino/arduino-create-agent:builder-1
      volumes:
        # cache go dependencies across pipeline's steps
        - ${{ github.workspace }}/go:/go

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Build
        run: goreleaser

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: dist
          path: dist

  notarize-macos:
    runs-on: macos-latest
    needs: create-release-artifacts

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Download artifacts
        uses: actions/download-artifact@v1
        with:
          name: dist

      - name: Download Gon
        run: |
          wget -q https://github.com/mitchellh/gon/releases/download/v0.2.2/gon_0.2.2_macos.zip
          unzip gon_0.2.2_macos.zip -d /usr/local/bin
          rm -f gon_0.2.2_macos.zip

      - name: Notarize binary, re-package it and update checksum
        env:
          AC_USERNAME: ${{ secrets.AC_USERNAME }}
          AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
        # This step performs the following:
        # 1. Download keychain from GH secrets and decode it from base64
        # 2. Add the keychain to the system keychains and unlock it
        # 3. Call Gon to start notarization process (using AC_USERNAME and AC_PASSWORD)
        # 4. Repackage the signed binary replaced in place by Gon (ignoring the output zip file)
        # 5. Recalculate package checksum and replace it in the goreleaser nnnnnn-checksums.txt file
        run: |
          echo "${{ secrets.KEYCHAIN }}" | base64 --decode  > ~/Library/Keychains/apple-developer.keychain-db
          security list-keychains -s ~/Library/Keychains/apple-developer.keychain-db
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" ~/Library/Keychains/apple-developer.keychain-db
          gon gon.config.hcl
          # GitHub's upload/download-artifact@v1 actions don't preserve file permissions,
          # so we need to add execution permission back until @v2 actions are released.
          chmod +x dist/arduino-create-agent_osx_darwin_amd64/arduino-create-agent
          TAG=${GITHUB_REF/refs\/tags\//}
          tar -czvf dist/arduino-create-agent_${TAG}_macOS_64bit.tar.gz \
          -C dist/arduino-create-agent_osx_darwin_amd64/  arduino-create-agent   \
          -C ../../ LICENSE.txt
          CLI_CHECKSUM=$(shasum -a 256 dist/arduino-create-agent_${TAG}_macOS_64bit.tar.gz | cut -d " " -f 1)
          perl -pi -w -e "s/.*arduino-create-agent_${TAG}_macOS_64bit.tar.gz/${CLI_CHECKSUM}  arduino-create-agent_${TAG}_macOS_64bit.tar.gz/g;" dist/*-checksums.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: dist
          path: dist

  create-release:
    runs-on: ubuntu-latest
    needs: notarize-macos

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Download artifact
        uses: actions/download-artifact@v1
        with:
          name: dist

      - name: Read CHANGELOG
        id: changelog
        run: |
          body=$(cat dist/CHANGELOG.md)
          body="${body//'%'/'%25'}"
          body="${body//$'\n'/'%0A'}"
          body="${body//$'\r'/'%0D'}"
          echo $body
          echo "::set-output name=BODY::$body"

      - name: Identify Prerelease
        # This is a workaround while waiting for create-release action
        # to implement auto pre-release based on tag
        id: prerelease
        run: |
          wget -q -P /tmp https://github.com/fsaintjacques/semver-tool/archive/3.0.0.zip
          unzip -p /tmp/3.0.0.zip semver-tool-3.0.0/src/semver >/tmp/semver && chmod +x /tmp/semver
          if [[ $(/tmp/semver get prerel ${GITHUB_REF/refs\/tags\//}) ]]; then echo "::set-output name=IS_PRE::true"; fi

      - name: Create Github Release
        id: create_release
        uses: actions/create-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: ${{ steps.changelog.outputs.BODY }}
          draft: false
          prerelease: ${{ steps.prerelease.outputs.IS_PRE }}

      - name: Upload release files on Github
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          tag: ${{ github.ref }}
          file_glob: true

      - name: Upload release files on Arduino downloads servers
        uses: docker://plugins/s3
        env:
          PLUGIN_SOURCE: 'dist/*'
          PLUGIN_TARGET: '/arduino-create-agent/'
          PLUGIN_STRIP_PREFIX: 'dist/'
          PLUGIN_BUCKET: ${{ secrets.DOWNLOADS_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
